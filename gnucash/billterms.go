// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package gnucash

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Billterm is an object representing the database table.
type Billterm struct {
	GUID          string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	Name          string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description   string      `boil:"description" json:"description" toml:"description" yaml:"description"`
	Refcount      int64       `boil:"refcount" json:"refcount" toml:"refcount" yaml:"refcount"`
	Invisible     int64       `boil:"invisible" json:"invisible" toml:"invisible" yaml:"invisible"`
	Parent        null.String `boil:"parent" json:"parent,omitempty" toml:"parent" yaml:"parent,omitempty"`
	Type          string      `boil:"type" json:"type" toml:"type" yaml:"type"`
	Duedays       null.Int64  `boil:"duedays" json:"duedays,omitempty" toml:"duedays" yaml:"duedays,omitempty"`
	Discountdays  null.Int64  `boil:"discountdays" json:"discountdays,omitempty" toml:"discountdays" yaml:"discountdays,omitempty"`
	DiscountNum   null.Int64  `boil:"discount_num" json:"discount_num,omitempty" toml:"discount_num" yaml:"discount_num,omitempty"`
	DiscountDenom null.Int64  `boil:"discount_denom" json:"discount_denom,omitempty" toml:"discount_denom" yaml:"discount_denom,omitempty"`
	Cutoff        null.Int64  `boil:"cutoff" json:"cutoff,omitempty" toml:"cutoff" yaml:"cutoff,omitempty"`

	R *billtermR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L billtermL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BilltermColumns = struct {
	GUID          string
	Name          string
	Description   string
	Refcount      string
	Invisible     string
	Parent        string
	Type          string
	Duedays       string
	Discountdays  string
	DiscountNum   string
	DiscountDenom string
	Cutoff        string
}{
	GUID:          "guid",
	Name:          "name",
	Description:   "description",
	Refcount:      "refcount",
	Invisible:     "invisible",
	Parent:        "parent",
	Type:          "type",
	Duedays:       "duedays",
	Discountdays:  "discountdays",
	DiscountNum:   "discount_num",
	DiscountDenom: "discount_denom",
	Cutoff:        "cutoff",
}

var BilltermTableColumns = struct {
	GUID          string
	Name          string
	Description   string
	Refcount      string
	Invisible     string
	Parent        string
	Type          string
	Duedays       string
	Discountdays  string
	DiscountNum   string
	DiscountDenom string
	Cutoff        string
}{
	GUID:          "billterms.guid",
	Name:          "billterms.name",
	Description:   "billterms.description",
	Refcount:      "billterms.refcount",
	Invisible:     "billterms.invisible",
	Parent:        "billterms.parent",
	Type:          "billterms.type",
	Duedays:       "billterms.duedays",
	Discountdays:  "billterms.discountdays",
	DiscountNum:   "billterms.discount_num",
	DiscountDenom: "billterms.discount_denom",
	Cutoff:        "billterms.cutoff",
}

// Generated where

var BilltermWhere = struct {
	GUID          whereHelperstring
	Name          whereHelperstring
	Description   whereHelperstring
	Refcount      whereHelperint64
	Invisible     whereHelperint64
	Parent        whereHelpernull_String
	Type          whereHelperstring
	Duedays       whereHelpernull_Int64
	Discountdays  whereHelpernull_Int64
	DiscountNum   whereHelpernull_Int64
	DiscountDenom whereHelpernull_Int64
	Cutoff        whereHelpernull_Int64
}{
	GUID:          whereHelperstring{field: "\"billterms\".\"guid\""},
	Name:          whereHelperstring{field: "\"billterms\".\"name\""},
	Description:   whereHelperstring{field: "\"billterms\".\"description\""},
	Refcount:      whereHelperint64{field: "\"billterms\".\"refcount\""},
	Invisible:     whereHelperint64{field: "\"billterms\".\"invisible\""},
	Parent:        whereHelpernull_String{field: "\"billterms\".\"parent\""},
	Type:          whereHelperstring{field: "\"billterms\".\"type\""},
	Duedays:       whereHelpernull_Int64{field: "\"billterms\".\"duedays\""},
	Discountdays:  whereHelpernull_Int64{field: "\"billterms\".\"discountdays\""},
	DiscountNum:   whereHelpernull_Int64{field: "\"billterms\".\"discount_num\""},
	DiscountDenom: whereHelpernull_Int64{field: "\"billterms\".\"discount_denom\""},
	Cutoff:        whereHelpernull_Int64{field: "\"billterms\".\"cutoff\""},
}

// BilltermRels is where relationship names are stored.
var BilltermRels = struct {
}{}

// billtermR is where relationships are stored.
type billtermR struct {
}

// NewStruct creates a new relationship struct
func (*billtermR) NewStruct() *billtermR {
	return &billtermR{}
}

// billtermL is where Load methods for each relationship are stored.
type billtermL struct{}

var (
	billtermAllColumns            = []string{"guid", "name", "description", "refcount", "invisible", "parent", "type", "duedays", "discountdays", "discount_num", "discount_denom", "cutoff"}
	billtermColumnsWithoutDefault = []string{"guid", "name", "description", "refcount", "invisible", "type"}
	billtermColumnsWithDefault    = []string{"parent", "duedays", "discountdays", "discount_num", "discount_denom", "cutoff"}
	billtermPrimaryKeyColumns     = []string{"guid"}
	billtermGeneratedColumns      = []string{}
)

type (
	// BilltermSlice is an alias for a slice of pointers to Billterm.
	// This should almost always be used instead of []Billterm.
	BilltermSlice []*Billterm
	// BilltermHook is the signature for custom Billterm hook methods
	BilltermHook func(context.Context, boil.ContextExecutor, *Billterm) error

	billtermQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	billtermType                 = reflect.TypeOf(&Billterm{})
	billtermMapping              = queries.MakeStructMapping(billtermType)
	billtermPrimaryKeyMapping, _ = queries.BindMapping(billtermType, billtermMapping, billtermPrimaryKeyColumns)
	billtermInsertCacheMut       sync.RWMutex
	billtermInsertCache          = make(map[string]insertCache)
	billtermUpdateCacheMut       sync.RWMutex
	billtermUpdateCache          = make(map[string]updateCache)
	billtermUpsertCacheMut       sync.RWMutex
	billtermUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var billtermAfterSelectHooks []BilltermHook

var billtermBeforeInsertHooks []BilltermHook
var billtermAfterInsertHooks []BilltermHook

var billtermBeforeUpdateHooks []BilltermHook
var billtermAfterUpdateHooks []BilltermHook

var billtermBeforeDeleteHooks []BilltermHook
var billtermAfterDeleteHooks []BilltermHook

var billtermBeforeUpsertHooks []BilltermHook
var billtermAfterUpsertHooks []BilltermHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Billterm) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range billtermAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Billterm) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range billtermBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Billterm) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range billtermAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Billterm) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range billtermBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Billterm) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range billtermAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Billterm) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range billtermBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Billterm) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range billtermAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Billterm) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range billtermBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Billterm) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range billtermAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBilltermHook registers your hook function for all future operations.
func AddBilltermHook(hookPoint boil.HookPoint, billtermHook BilltermHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		billtermAfterSelectHooks = append(billtermAfterSelectHooks, billtermHook)
	case boil.BeforeInsertHook:
		billtermBeforeInsertHooks = append(billtermBeforeInsertHooks, billtermHook)
	case boil.AfterInsertHook:
		billtermAfterInsertHooks = append(billtermAfterInsertHooks, billtermHook)
	case boil.BeforeUpdateHook:
		billtermBeforeUpdateHooks = append(billtermBeforeUpdateHooks, billtermHook)
	case boil.AfterUpdateHook:
		billtermAfterUpdateHooks = append(billtermAfterUpdateHooks, billtermHook)
	case boil.BeforeDeleteHook:
		billtermBeforeDeleteHooks = append(billtermBeforeDeleteHooks, billtermHook)
	case boil.AfterDeleteHook:
		billtermAfterDeleteHooks = append(billtermAfterDeleteHooks, billtermHook)
	case boil.BeforeUpsertHook:
		billtermBeforeUpsertHooks = append(billtermBeforeUpsertHooks, billtermHook)
	case boil.AfterUpsertHook:
		billtermAfterUpsertHooks = append(billtermAfterUpsertHooks, billtermHook)
	}
}

// One returns a single billterm record from the query.
func (q billtermQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Billterm, error) {
	o := &Billterm{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "gnucash: failed to execute a one query for billterms")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Billterm records from the query.
func (q billtermQuery) All(ctx context.Context, exec boil.ContextExecutor) (BilltermSlice, error) {
	var o []*Billterm

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "gnucash: failed to assign all query results to Billterm slice")
	}

	if len(billtermAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Billterm records in the query.
func (q billtermQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to count billterms rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q billtermQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "gnucash: failed to check if billterms exists")
	}

	return count > 0, nil
}

// Billterms retrieves all the records using an executor.
func Billterms(mods ...qm.QueryMod) billtermQuery {
	mods = append(mods, qm.From("\"billterms\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"billterms\".*"})
	}

	return billtermQuery{q}
}

// FindBillterm retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBillterm(ctx context.Context, exec boil.ContextExecutor, gUID string, selectCols ...string) (*Billterm, error) {
	billtermObj := &Billterm{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"billterms\" where \"guid\"=?", sel,
	)

	q := queries.Raw(query, gUID)

	err := q.Bind(ctx, exec, billtermObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "gnucash: unable to select from billterms")
	}

	if err = billtermObj.doAfterSelectHooks(ctx, exec); err != nil {
		return billtermObj, err
	}

	return billtermObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Billterm) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("gnucash: no billterms provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(billtermColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	billtermInsertCacheMut.RLock()
	cache, cached := billtermInsertCache[key]
	billtermInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			billtermAllColumns,
			billtermColumnsWithDefault,
			billtermColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(billtermType, billtermMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(billtermType, billtermMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"billterms\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"billterms\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "gnucash: unable to insert into billterms")
	}

	if !cached {
		billtermInsertCacheMut.Lock()
		billtermInsertCache[key] = cache
		billtermInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Billterm.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Billterm) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	billtermUpdateCacheMut.RLock()
	cache, cached := billtermUpdateCache[key]
	billtermUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			billtermAllColumns,
			billtermPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("gnucash: unable to update billterms, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"billterms\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, billtermPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(billtermType, billtermMapping, append(wl, billtermPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to update billterms row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by update for billterms")
	}

	if !cached {
		billtermUpdateCacheMut.Lock()
		billtermUpdateCache[key] = cache
		billtermUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q billtermQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to update all for billterms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to retrieve rows affected for billterms")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BilltermSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("gnucash: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), billtermPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"billterms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, billtermPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to update all in billterm slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to retrieve rows affected all in update all billterm")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Billterm) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("gnucash: no billterms provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(billtermColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	billtermUpsertCacheMut.RLock()
	cache, cached := billtermUpsertCache[key]
	billtermUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			billtermAllColumns,
			billtermColumnsWithDefault,
			billtermColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			billtermAllColumns,
			billtermPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("gnucash: unable to upsert billterms, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(billtermPrimaryKeyColumns))
			copy(conflict, billtermPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"billterms\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(billtermType, billtermMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(billtermType, billtermMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "gnucash: unable to upsert billterms")
	}

	if !cached {
		billtermUpsertCacheMut.Lock()
		billtermUpsertCache[key] = cache
		billtermUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Billterm record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Billterm) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("gnucash: no Billterm provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), billtermPrimaryKeyMapping)
	sql := "DELETE FROM \"billterms\" WHERE \"guid\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to delete from billterms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by delete for billterms")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q billtermQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("gnucash: no billtermQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to delete all from billterms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by deleteall for billterms")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BilltermSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(billtermBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), billtermPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"billterms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, billtermPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to delete all from billterm slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by deleteall for billterms")
	}

	if len(billtermAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Billterm) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBillterm(ctx, exec, o.GUID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BilltermSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BilltermSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), billtermPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"billterms\".* FROM \"billterms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, billtermPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "gnucash: unable to reload all in BilltermSlice")
	}

	*o = slice

	return nil
}

// BilltermExists checks if the Billterm row exists.
func BilltermExists(ctx context.Context, exec boil.ContextExecutor, gUID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"billterms\" where \"guid\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, gUID)
	}
	row := exec.QueryRowContext(ctx, sql, gUID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "gnucash: unable to check if billterms exists")
	}

	return exists, nil
}

// Exists checks if the Billterm row exists.
func (o *Billterm) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BilltermExists(ctx, exec, o.GUID)
}
