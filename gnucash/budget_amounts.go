// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package gnucash

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BudgetAmount is an object representing the database table.
type BudgetAmount struct {
	ID          int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	BudgetGUID  string `boil:"budget_guid" json:"budget_guid" toml:"budget_guid" yaml:"budget_guid"`
	AccountGUID string `boil:"account_guid" json:"account_guid" toml:"account_guid" yaml:"account_guid"`
	PeriodNum   int64  `boil:"period_num" json:"period_num" toml:"period_num" yaml:"period_num"`
	AmountNum   int64  `boil:"amount_num" json:"amount_num" toml:"amount_num" yaml:"amount_num"`
	AmountDenom int64  `boil:"amount_denom" json:"amount_denom" toml:"amount_denom" yaml:"amount_denom"`

	R *budgetAmountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L budgetAmountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BudgetAmountColumns = struct {
	ID          string
	BudgetGUID  string
	AccountGUID string
	PeriodNum   string
	AmountNum   string
	AmountDenom string
}{
	ID:          "id",
	BudgetGUID:  "budget_guid",
	AccountGUID: "account_guid",
	PeriodNum:   "period_num",
	AmountNum:   "amount_num",
	AmountDenom: "amount_denom",
}

var BudgetAmountTableColumns = struct {
	ID          string
	BudgetGUID  string
	AccountGUID string
	PeriodNum   string
	AmountNum   string
	AmountDenom string
}{
	ID:          "budget_amounts.id",
	BudgetGUID:  "budget_amounts.budget_guid",
	AccountGUID: "budget_amounts.account_guid",
	PeriodNum:   "budget_amounts.period_num",
	AmountNum:   "budget_amounts.amount_num",
	AmountDenom: "budget_amounts.amount_denom",
}

// Generated where

var BudgetAmountWhere = struct {
	ID          whereHelperint64
	BudgetGUID  whereHelperstring
	AccountGUID whereHelperstring
	PeriodNum   whereHelperint64
	AmountNum   whereHelperint64
	AmountDenom whereHelperint64
}{
	ID:          whereHelperint64{field: "\"budget_amounts\".\"id\""},
	BudgetGUID:  whereHelperstring{field: "\"budget_amounts\".\"budget_guid\""},
	AccountGUID: whereHelperstring{field: "\"budget_amounts\".\"account_guid\""},
	PeriodNum:   whereHelperint64{field: "\"budget_amounts\".\"period_num\""},
	AmountNum:   whereHelperint64{field: "\"budget_amounts\".\"amount_num\""},
	AmountDenom: whereHelperint64{field: "\"budget_amounts\".\"amount_denom\""},
}

// BudgetAmountRels is where relationship names are stored.
var BudgetAmountRels = struct {
}{}

// budgetAmountR is where relationships are stored.
type budgetAmountR struct {
}

// NewStruct creates a new relationship struct
func (*budgetAmountR) NewStruct() *budgetAmountR {
	return &budgetAmountR{}
}

// budgetAmountL is where Load methods for each relationship are stored.
type budgetAmountL struct{}

var (
	budgetAmountAllColumns            = []string{"id", "budget_guid", "account_guid", "period_num", "amount_num", "amount_denom"}
	budgetAmountColumnsWithoutDefault = []string{"budget_guid", "account_guid", "period_num", "amount_num", "amount_denom"}
	budgetAmountColumnsWithDefault    = []string{"id"}
	budgetAmountPrimaryKeyColumns     = []string{"id"}
	budgetAmountGeneratedColumns      = []string{"id"}
)

type (
	// BudgetAmountSlice is an alias for a slice of pointers to BudgetAmount.
	// This should almost always be used instead of []BudgetAmount.
	BudgetAmountSlice []*BudgetAmount
	// BudgetAmountHook is the signature for custom BudgetAmount hook methods
	BudgetAmountHook func(context.Context, boil.ContextExecutor, *BudgetAmount) error

	budgetAmountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	budgetAmountType                 = reflect.TypeOf(&BudgetAmount{})
	budgetAmountMapping              = queries.MakeStructMapping(budgetAmountType)
	budgetAmountPrimaryKeyMapping, _ = queries.BindMapping(budgetAmountType, budgetAmountMapping, budgetAmountPrimaryKeyColumns)
	budgetAmountInsertCacheMut       sync.RWMutex
	budgetAmountInsertCache          = make(map[string]insertCache)
	budgetAmountUpdateCacheMut       sync.RWMutex
	budgetAmountUpdateCache          = make(map[string]updateCache)
	budgetAmountUpsertCacheMut       sync.RWMutex
	budgetAmountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var budgetAmountAfterSelectHooks []BudgetAmountHook

var budgetAmountBeforeInsertHooks []BudgetAmountHook
var budgetAmountAfterInsertHooks []BudgetAmountHook

var budgetAmountBeforeUpdateHooks []BudgetAmountHook
var budgetAmountAfterUpdateHooks []BudgetAmountHook

var budgetAmountBeforeDeleteHooks []BudgetAmountHook
var budgetAmountAfterDeleteHooks []BudgetAmountHook

var budgetAmountBeforeUpsertHooks []BudgetAmountHook
var budgetAmountAfterUpsertHooks []BudgetAmountHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BudgetAmount) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range budgetAmountAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BudgetAmount) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range budgetAmountBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BudgetAmount) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range budgetAmountAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BudgetAmount) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range budgetAmountBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BudgetAmount) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range budgetAmountAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BudgetAmount) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range budgetAmountBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BudgetAmount) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range budgetAmountAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BudgetAmount) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range budgetAmountBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BudgetAmount) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range budgetAmountAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBudgetAmountHook registers your hook function for all future operations.
func AddBudgetAmountHook(hookPoint boil.HookPoint, budgetAmountHook BudgetAmountHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		budgetAmountAfterSelectHooks = append(budgetAmountAfterSelectHooks, budgetAmountHook)
	case boil.BeforeInsertHook:
		budgetAmountBeforeInsertHooks = append(budgetAmountBeforeInsertHooks, budgetAmountHook)
	case boil.AfterInsertHook:
		budgetAmountAfterInsertHooks = append(budgetAmountAfterInsertHooks, budgetAmountHook)
	case boil.BeforeUpdateHook:
		budgetAmountBeforeUpdateHooks = append(budgetAmountBeforeUpdateHooks, budgetAmountHook)
	case boil.AfterUpdateHook:
		budgetAmountAfterUpdateHooks = append(budgetAmountAfterUpdateHooks, budgetAmountHook)
	case boil.BeforeDeleteHook:
		budgetAmountBeforeDeleteHooks = append(budgetAmountBeforeDeleteHooks, budgetAmountHook)
	case boil.AfterDeleteHook:
		budgetAmountAfterDeleteHooks = append(budgetAmountAfterDeleteHooks, budgetAmountHook)
	case boil.BeforeUpsertHook:
		budgetAmountBeforeUpsertHooks = append(budgetAmountBeforeUpsertHooks, budgetAmountHook)
	case boil.AfterUpsertHook:
		budgetAmountAfterUpsertHooks = append(budgetAmountAfterUpsertHooks, budgetAmountHook)
	}
}

// One returns a single budgetAmount record from the query.
func (q budgetAmountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BudgetAmount, error) {
	o := &BudgetAmount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "gnucash: failed to execute a one query for budget_amounts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BudgetAmount records from the query.
func (q budgetAmountQuery) All(ctx context.Context, exec boil.ContextExecutor) (BudgetAmountSlice, error) {
	var o []*BudgetAmount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "gnucash: failed to assign all query results to BudgetAmount slice")
	}

	if len(budgetAmountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BudgetAmount records in the query.
func (q budgetAmountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to count budget_amounts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q budgetAmountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "gnucash: failed to check if budget_amounts exists")
	}

	return count > 0, nil
}

// BudgetAmounts retrieves all the records using an executor.
func BudgetAmounts(mods ...qm.QueryMod) budgetAmountQuery {
	mods = append(mods, qm.From("\"budget_amounts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"budget_amounts\".*"})
	}

	return budgetAmountQuery{q}
}

// FindBudgetAmount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBudgetAmount(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*BudgetAmount, error) {
	budgetAmountObj := &BudgetAmount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"budget_amounts\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, budgetAmountObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "gnucash: unable to select from budget_amounts")
	}

	if err = budgetAmountObj.doAfterSelectHooks(ctx, exec); err != nil {
		return budgetAmountObj, err
	}

	return budgetAmountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BudgetAmount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("gnucash: no budget_amounts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(budgetAmountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	budgetAmountInsertCacheMut.RLock()
	cache, cached := budgetAmountInsertCache[key]
	budgetAmountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			budgetAmountAllColumns,
			budgetAmountColumnsWithDefault,
			budgetAmountColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, budgetAmountGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(budgetAmountType, budgetAmountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(budgetAmountType, budgetAmountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"budget_amounts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"budget_amounts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "gnucash: unable to insert into budget_amounts")
	}

	if !cached {
		budgetAmountInsertCacheMut.Lock()
		budgetAmountInsertCache[key] = cache
		budgetAmountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BudgetAmount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BudgetAmount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	budgetAmountUpdateCacheMut.RLock()
	cache, cached := budgetAmountUpdateCache[key]
	budgetAmountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			budgetAmountAllColumns,
			budgetAmountPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, budgetAmountGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("gnucash: unable to update budget_amounts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"budget_amounts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, budgetAmountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(budgetAmountType, budgetAmountMapping, append(wl, budgetAmountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to update budget_amounts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by update for budget_amounts")
	}

	if !cached {
		budgetAmountUpdateCacheMut.Lock()
		budgetAmountUpdateCache[key] = cache
		budgetAmountUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q budgetAmountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to update all for budget_amounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to retrieve rows affected for budget_amounts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BudgetAmountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("gnucash: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), budgetAmountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"budget_amounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, budgetAmountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to update all in budgetAmount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to retrieve rows affected all in update all budgetAmount")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BudgetAmount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("gnucash: no budget_amounts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(budgetAmountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	budgetAmountUpsertCacheMut.RLock()
	cache, cached := budgetAmountUpsertCache[key]
	budgetAmountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			budgetAmountAllColumns,
			budgetAmountColumnsWithDefault,
			budgetAmountColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			budgetAmountAllColumns,
			budgetAmountPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("gnucash: unable to upsert budget_amounts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(budgetAmountPrimaryKeyColumns))
			copy(conflict, budgetAmountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"budget_amounts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(budgetAmountType, budgetAmountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(budgetAmountType, budgetAmountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "gnucash: unable to upsert budget_amounts")
	}

	if !cached {
		budgetAmountUpsertCacheMut.Lock()
		budgetAmountUpsertCache[key] = cache
		budgetAmountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BudgetAmount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BudgetAmount) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("gnucash: no BudgetAmount provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), budgetAmountPrimaryKeyMapping)
	sql := "DELETE FROM \"budget_amounts\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to delete from budget_amounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by delete for budget_amounts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q budgetAmountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("gnucash: no budgetAmountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to delete all from budget_amounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by deleteall for budget_amounts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BudgetAmountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(budgetAmountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), budgetAmountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"budget_amounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, budgetAmountPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to delete all from budgetAmount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by deleteall for budget_amounts")
	}

	if len(budgetAmountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BudgetAmount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBudgetAmount(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BudgetAmountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BudgetAmountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), budgetAmountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"budget_amounts\".* FROM \"budget_amounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, budgetAmountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "gnucash: unable to reload all in BudgetAmountSlice")
	}

	*o = slice

	return nil
}

// BudgetAmountExists checks if the BudgetAmount row exists.
func BudgetAmountExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"budget_amounts\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "gnucash: unable to check if budget_amounts exists")
	}

	return exists, nil
}

// Exists checks if the BudgetAmount row exists.
func (o *BudgetAmount) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BudgetAmountExists(ctx, exec, o.ID)
}
