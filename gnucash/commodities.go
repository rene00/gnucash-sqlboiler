// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package gnucash

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Commodity is an object representing the database table.
type Commodity struct {
	GUID        string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	Namespace   string      `boil:"namespace" json:"namespace" toml:"namespace" yaml:"namespace"`
	Mnemonic    string      `boil:"mnemonic" json:"mnemonic" toml:"mnemonic" yaml:"mnemonic"`
	Fullname    null.String `boil:"fullname" json:"fullname,omitempty" toml:"fullname" yaml:"fullname,omitempty"`
	Cusip       null.String `boil:"cusip" json:"cusip,omitempty" toml:"cusip" yaml:"cusip,omitempty"`
	Fraction    int64       `boil:"fraction" json:"fraction" toml:"fraction" yaml:"fraction"`
	QuoteFlag   int64       `boil:"quote_flag" json:"quote_flag" toml:"quote_flag" yaml:"quote_flag"`
	QuoteSource null.String `boil:"quote_source" json:"quote_source,omitempty" toml:"quote_source" yaml:"quote_source,omitempty"`
	QuoteTZ     null.String `boil:"quote_tz" json:"quote_tz,omitempty" toml:"quote_tz" yaml:"quote_tz,omitempty"`

	R *commodityR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L commodityL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CommodityColumns = struct {
	GUID        string
	Namespace   string
	Mnemonic    string
	Fullname    string
	Cusip       string
	Fraction    string
	QuoteFlag   string
	QuoteSource string
	QuoteTZ     string
}{
	GUID:        "guid",
	Namespace:   "namespace",
	Mnemonic:    "mnemonic",
	Fullname:    "fullname",
	Cusip:       "cusip",
	Fraction:    "fraction",
	QuoteFlag:   "quote_flag",
	QuoteSource: "quote_source",
	QuoteTZ:     "quote_tz",
}

var CommodityTableColumns = struct {
	GUID        string
	Namespace   string
	Mnemonic    string
	Fullname    string
	Cusip       string
	Fraction    string
	QuoteFlag   string
	QuoteSource string
	QuoteTZ     string
}{
	GUID:        "commodities.guid",
	Namespace:   "commodities.namespace",
	Mnemonic:    "commodities.mnemonic",
	Fullname:    "commodities.fullname",
	Cusip:       "commodities.cusip",
	Fraction:    "commodities.fraction",
	QuoteFlag:   "commodities.quote_flag",
	QuoteSource: "commodities.quote_source",
	QuoteTZ:     "commodities.quote_tz",
}

// Generated where

var CommodityWhere = struct {
	GUID        whereHelperstring
	Namespace   whereHelperstring
	Mnemonic    whereHelperstring
	Fullname    whereHelpernull_String
	Cusip       whereHelpernull_String
	Fraction    whereHelperint64
	QuoteFlag   whereHelperint64
	QuoteSource whereHelpernull_String
	QuoteTZ     whereHelpernull_String
}{
	GUID:        whereHelperstring{field: "\"commodities\".\"guid\""},
	Namespace:   whereHelperstring{field: "\"commodities\".\"namespace\""},
	Mnemonic:    whereHelperstring{field: "\"commodities\".\"mnemonic\""},
	Fullname:    whereHelpernull_String{field: "\"commodities\".\"fullname\""},
	Cusip:       whereHelpernull_String{field: "\"commodities\".\"cusip\""},
	Fraction:    whereHelperint64{field: "\"commodities\".\"fraction\""},
	QuoteFlag:   whereHelperint64{field: "\"commodities\".\"quote_flag\""},
	QuoteSource: whereHelpernull_String{field: "\"commodities\".\"quote_source\""},
	QuoteTZ:     whereHelpernull_String{field: "\"commodities\".\"quote_tz\""},
}

// CommodityRels is where relationship names are stored.
var CommodityRels = struct {
}{}

// commodityR is where relationships are stored.
type commodityR struct {
}

// NewStruct creates a new relationship struct
func (*commodityR) NewStruct() *commodityR {
	return &commodityR{}
}

// commodityL is where Load methods for each relationship are stored.
type commodityL struct{}

var (
	commodityAllColumns            = []string{"guid", "namespace", "mnemonic", "fullname", "cusip", "fraction", "quote_flag", "quote_source", "quote_tz"}
	commodityColumnsWithoutDefault = []string{"guid", "namespace", "mnemonic", "fraction", "quote_flag"}
	commodityColumnsWithDefault    = []string{"fullname", "cusip", "quote_source", "quote_tz"}
	commodityPrimaryKeyColumns     = []string{"guid"}
	commodityGeneratedColumns      = []string{}
)

type (
	// CommoditySlice is an alias for a slice of pointers to Commodity.
	// This should almost always be used instead of []Commodity.
	CommoditySlice []*Commodity
	// CommodityHook is the signature for custom Commodity hook methods
	CommodityHook func(context.Context, boil.ContextExecutor, *Commodity) error

	commodityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	commodityType                 = reflect.TypeOf(&Commodity{})
	commodityMapping              = queries.MakeStructMapping(commodityType)
	commodityPrimaryKeyMapping, _ = queries.BindMapping(commodityType, commodityMapping, commodityPrimaryKeyColumns)
	commodityInsertCacheMut       sync.RWMutex
	commodityInsertCache          = make(map[string]insertCache)
	commodityUpdateCacheMut       sync.RWMutex
	commodityUpdateCache          = make(map[string]updateCache)
	commodityUpsertCacheMut       sync.RWMutex
	commodityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var commodityAfterSelectHooks []CommodityHook

var commodityBeforeInsertHooks []CommodityHook
var commodityAfterInsertHooks []CommodityHook

var commodityBeforeUpdateHooks []CommodityHook
var commodityAfterUpdateHooks []CommodityHook

var commodityBeforeDeleteHooks []CommodityHook
var commodityAfterDeleteHooks []CommodityHook

var commodityBeforeUpsertHooks []CommodityHook
var commodityAfterUpsertHooks []CommodityHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Commodity) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commodityAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Commodity) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commodityBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Commodity) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commodityAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Commodity) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commodityBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Commodity) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commodityAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Commodity) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commodityBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Commodity) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commodityAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Commodity) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commodityBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Commodity) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range commodityAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCommodityHook registers your hook function for all future operations.
func AddCommodityHook(hookPoint boil.HookPoint, commodityHook CommodityHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		commodityAfterSelectHooks = append(commodityAfterSelectHooks, commodityHook)
	case boil.BeforeInsertHook:
		commodityBeforeInsertHooks = append(commodityBeforeInsertHooks, commodityHook)
	case boil.AfterInsertHook:
		commodityAfterInsertHooks = append(commodityAfterInsertHooks, commodityHook)
	case boil.BeforeUpdateHook:
		commodityBeforeUpdateHooks = append(commodityBeforeUpdateHooks, commodityHook)
	case boil.AfterUpdateHook:
		commodityAfterUpdateHooks = append(commodityAfterUpdateHooks, commodityHook)
	case boil.BeforeDeleteHook:
		commodityBeforeDeleteHooks = append(commodityBeforeDeleteHooks, commodityHook)
	case boil.AfterDeleteHook:
		commodityAfterDeleteHooks = append(commodityAfterDeleteHooks, commodityHook)
	case boil.BeforeUpsertHook:
		commodityBeforeUpsertHooks = append(commodityBeforeUpsertHooks, commodityHook)
	case boil.AfterUpsertHook:
		commodityAfterUpsertHooks = append(commodityAfterUpsertHooks, commodityHook)
	}
}

// One returns a single commodity record from the query.
func (q commodityQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Commodity, error) {
	o := &Commodity{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "gnucash: failed to execute a one query for commodities")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Commodity records from the query.
func (q commodityQuery) All(ctx context.Context, exec boil.ContextExecutor) (CommoditySlice, error) {
	var o []*Commodity

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "gnucash: failed to assign all query results to Commodity slice")
	}

	if len(commodityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Commodity records in the query.
func (q commodityQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to count commodities rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q commodityQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "gnucash: failed to check if commodities exists")
	}

	return count > 0, nil
}

// Commodities retrieves all the records using an executor.
func Commodities(mods ...qm.QueryMod) commodityQuery {
	mods = append(mods, qm.From("\"commodities\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"commodities\".*"})
	}

	return commodityQuery{q}
}

// FindCommodity retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCommodity(ctx context.Context, exec boil.ContextExecutor, gUID string, selectCols ...string) (*Commodity, error) {
	commodityObj := &Commodity{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"commodities\" where \"guid\"=?", sel,
	)

	q := queries.Raw(query, gUID)

	err := q.Bind(ctx, exec, commodityObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "gnucash: unable to select from commodities")
	}

	if err = commodityObj.doAfterSelectHooks(ctx, exec); err != nil {
		return commodityObj, err
	}

	return commodityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Commodity) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("gnucash: no commodities provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(commodityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	commodityInsertCacheMut.RLock()
	cache, cached := commodityInsertCache[key]
	commodityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			commodityAllColumns,
			commodityColumnsWithDefault,
			commodityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(commodityType, commodityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(commodityType, commodityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"commodities\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"commodities\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "gnucash: unable to insert into commodities")
	}

	if !cached {
		commodityInsertCacheMut.Lock()
		commodityInsertCache[key] = cache
		commodityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Commodity.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Commodity) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	commodityUpdateCacheMut.RLock()
	cache, cached := commodityUpdateCache[key]
	commodityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			commodityAllColumns,
			commodityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("gnucash: unable to update commodities, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"commodities\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, commodityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(commodityType, commodityMapping, append(wl, commodityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to update commodities row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by update for commodities")
	}

	if !cached {
		commodityUpdateCacheMut.Lock()
		commodityUpdateCache[key] = cache
		commodityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q commodityQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to update all for commodities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to retrieve rows affected for commodities")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CommoditySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("gnucash: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commodityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"commodities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, commodityPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to update all in commodity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to retrieve rows affected all in update all commodity")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Commodity) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("gnucash: no commodities provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(commodityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	commodityUpsertCacheMut.RLock()
	cache, cached := commodityUpsertCache[key]
	commodityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			commodityAllColumns,
			commodityColumnsWithDefault,
			commodityColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			commodityAllColumns,
			commodityPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("gnucash: unable to upsert commodities, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(commodityPrimaryKeyColumns))
			copy(conflict, commodityPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"commodities\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(commodityType, commodityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(commodityType, commodityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "gnucash: unable to upsert commodities")
	}

	if !cached {
		commodityUpsertCacheMut.Lock()
		commodityUpsertCache[key] = cache
		commodityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Commodity record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Commodity) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("gnucash: no Commodity provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), commodityPrimaryKeyMapping)
	sql := "DELETE FROM \"commodities\" WHERE \"guid\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to delete from commodities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by delete for commodities")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q commodityQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("gnucash: no commodityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to delete all from commodities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by deleteall for commodities")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CommoditySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(commodityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commodityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"commodities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, commodityPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to delete all from commodity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by deleteall for commodities")
	}

	if len(commodityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Commodity) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCommodity(ctx, exec, o.GUID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommoditySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CommoditySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commodityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"commodities\".* FROM \"commodities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, commodityPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "gnucash: unable to reload all in CommoditySlice")
	}

	*o = slice

	return nil
}

// CommodityExists checks if the Commodity row exists.
func CommodityExists(ctx context.Context, exec boil.ContextExecutor, gUID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"commodities\" where \"guid\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, gUID)
	}
	row := exec.QueryRowContext(ctx, sql, gUID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "gnucash: unable to check if commodities exists")
	}

	return exists, nil
}

// Exists checks if the Commodity row exists.
func (o *Commodity) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CommodityExists(ctx, exec, o.GUID)
}
