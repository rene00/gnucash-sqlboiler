// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package gnucash

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Recurrence is an object representing the database table.
type Recurrence struct {
	ID                      int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	ObjGUID                 string `boil:"obj_guid" json:"obj_guid" toml:"obj_guid" yaml:"obj_guid"`
	RecurrenceMult          int64  `boil:"recurrence_mult" json:"recurrence_mult" toml:"recurrence_mult" yaml:"recurrence_mult"`
	RecurrencePeriodType    string `boil:"recurrence_period_type" json:"recurrence_period_type" toml:"recurrence_period_type" yaml:"recurrence_period_type"`
	RecurrencePeriodStart   string `boil:"recurrence_period_start" json:"recurrence_period_start" toml:"recurrence_period_start" yaml:"recurrence_period_start"`
	RecurrenceWeekendAdjust string `boil:"recurrence_weekend_adjust" json:"recurrence_weekend_adjust" toml:"recurrence_weekend_adjust" yaml:"recurrence_weekend_adjust"`

	R *recurrenceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L recurrenceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RecurrenceColumns = struct {
	ID                      string
	ObjGUID                 string
	RecurrenceMult          string
	RecurrencePeriodType    string
	RecurrencePeriodStart   string
	RecurrenceWeekendAdjust string
}{
	ID:                      "id",
	ObjGUID:                 "obj_guid",
	RecurrenceMult:          "recurrence_mult",
	RecurrencePeriodType:    "recurrence_period_type",
	RecurrencePeriodStart:   "recurrence_period_start",
	RecurrenceWeekendAdjust: "recurrence_weekend_adjust",
}

var RecurrenceTableColumns = struct {
	ID                      string
	ObjGUID                 string
	RecurrenceMult          string
	RecurrencePeriodType    string
	RecurrencePeriodStart   string
	RecurrenceWeekendAdjust string
}{
	ID:                      "recurrences.id",
	ObjGUID:                 "recurrences.obj_guid",
	RecurrenceMult:          "recurrences.recurrence_mult",
	RecurrencePeriodType:    "recurrences.recurrence_period_type",
	RecurrencePeriodStart:   "recurrences.recurrence_period_start",
	RecurrenceWeekendAdjust: "recurrences.recurrence_weekend_adjust",
}

// Generated where

var RecurrenceWhere = struct {
	ID                      whereHelperint64
	ObjGUID                 whereHelperstring
	RecurrenceMult          whereHelperint64
	RecurrencePeriodType    whereHelperstring
	RecurrencePeriodStart   whereHelperstring
	RecurrenceWeekendAdjust whereHelperstring
}{
	ID:                      whereHelperint64{field: "\"recurrences\".\"id\""},
	ObjGUID:                 whereHelperstring{field: "\"recurrences\".\"obj_guid\""},
	RecurrenceMult:          whereHelperint64{field: "\"recurrences\".\"recurrence_mult\""},
	RecurrencePeriodType:    whereHelperstring{field: "\"recurrences\".\"recurrence_period_type\""},
	RecurrencePeriodStart:   whereHelperstring{field: "\"recurrences\".\"recurrence_period_start\""},
	RecurrenceWeekendAdjust: whereHelperstring{field: "\"recurrences\".\"recurrence_weekend_adjust\""},
}

// RecurrenceRels is where relationship names are stored.
var RecurrenceRels = struct {
}{}

// recurrenceR is where relationships are stored.
type recurrenceR struct {
}

// NewStruct creates a new relationship struct
func (*recurrenceR) NewStruct() *recurrenceR {
	return &recurrenceR{}
}

// recurrenceL is where Load methods for each relationship are stored.
type recurrenceL struct{}

var (
	recurrenceAllColumns            = []string{"id", "obj_guid", "recurrence_mult", "recurrence_period_type", "recurrence_period_start", "recurrence_weekend_adjust"}
	recurrenceColumnsWithoutDefault = []string{"obj_guid", "recurrence_mult", "recurrence_period_type", "recurrence_period_start", "recurrence_weekend_adjust"}
	recurrenceColumnsWithDefault    = []string{"id"}
	recurrencePrimaryKeyColumns     = []string{"id"}
	recurrenceGeneratedColumns      = []string{"id"}
)

type (
	// RecurrenceSlice is an alias for a slice of pointers to Recurrence.
	// This should almost always be used instead of []Recurrence.
	RecurrenceSlice []*Recurrence
	// RecurrenceHook is the signature for custom Recurrence hook methods
	RecurrenceHook func(context.Context, boil.ContextExecutor, *Recurrence) error

	recurrenceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	recurrenceType                 = reflect.TypeOf(&Recurrence{})
	recurrenceMapping              = queries.MakeStructMapping(recurrenceType)
	recurrencePrimaryKeyMapping, _ = queries.BindMapping(recurrenceType, recurrenceMapping, recurrencePrimaryKeyColumns)
	recurrenceInsertCacheMut       sync.RWMutex
	recurrenceInsertCache          = make(map[string]insertCache)
	recurrenceUpdateCacheMut       sync.RWMutex
	recurrenceUpdateCache          = make(map[string]updateCache)
	recurrenceUpsertCacheMut       sync.RWMutex
	recurrenceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var recurrenceAfterSelectHooks []RecurrenceHook

var recurrenceBeforeInsertHooks []RecurrenceHook
var recurrenceAfterInsertHooks []RecurrenceHook

var recurrenceBeforeUpdateHooks []RecurrenceHook
var recurrenceAfterUpdateHooks []RecurrenceHook

var recurrenceBeforeDeleteHooks []RecurrenceHook
var recurrenceAfterDeleteHooks []RecurrenceHook

var recurrenceBeforeUpsertHooks []RecurrenceHook
var recurrenceAfterUpsertHooks []RecurrenceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Recurrence) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recurrenceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Recurrence) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recurrenceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Recurrence) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recurrenceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Recurrence) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recurrenceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Recurrence) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recurrenceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Recurrence) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recurrenceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Recurrence) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recurrenceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Recurrence) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recurrenceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Recurrence) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recurrenceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRecurrenceHook registers your hook function for all future operations.
func AddRecurrenceHook(hookPoint boil.HookPoint, recurrenceHook RecurrenceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		recurrenceAfterSelectHooks = append(recurrenceAfterSelectHooks, recurrenceHook)
	case boil.BeforeInsertHook:
		recurrenceBeforeInsertHooks = append(recurrenceBeforeInsertHooks, recurrenceHook)
	case boil.AfterInsertHook:
		recurrenceAfterInsertHooks = append(recurrenceAfterInsertHooks, recurrenceHook)
	case boil.BeforeUpdateHook:
		recurrenceBeforeUpdateHooks = append(recurrenceBeforeUpdateHooks, recurrenceHook)
	case boil.AfterUpdateHook:
		recurrenceAfterUpdateHooks = append(recurrenceAfterUpdateHooks, recurrenceHook)
	case boil.BeforeDeleteHook:
		recurrenceBeforeDeleteHooks = append(recurrenceBeforeDeleteHooks, recurrenceHook)
	case boil.AfterDeleteHook:
		recurrenceAfterDeleteHooks = append(recurrenceAfterDeleteHooks, recurrenceHook)
	case boil.BeforeUpsertHook:
		recurrenceBeforeUpsertHooks = append(recurrenceBeforeUpsertHooks, recurrenceHook)
	case boil.AfterUpsertHook:
		recurrenceAfterUpsertHooks = append(recurrenceAfterUpsertHooks, recurrenceHook)
	}
}

// One returns a single recurrence record from the query.
func (q recurrenceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Recurrence, error) {
	o := &Recurrence{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "gnucash: failed to execute a one query for recurrences")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Recurrence records from the query.
func (q recurrenceQuery) All(ctx context.Context, exec boil.ContextExecutor) (RecurrenceSlice, error) {
	var o []*Recurrence

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "gnucash: failed to assign all query results to Recurrence slice")
	}

	if len(recurrenceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Recurrence records in the query.
func (q recurrenceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to count recurrences rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q recurrenceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "gnucash: failed to check if recurrences exists")
	}

	return count > 0, nil
}

// Recurrences retrieves all the records using an executor.
func Recurrences(mods ...qm.QueryMod) recurrenceQuery {
	mods = append(mods, qm.From("\"recurrences\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"recurrences\".*"})
	}

	return recurrenceQuery{q}
}

// FindRecurrence retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRecurrence(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Recurrence, error) {
	recurrenceObj := &Recurrence{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"recurrences\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, recurrenceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "gnucash: unable to select from recurrences")
	}

	if err = recurrenceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return recurrenceObj, err
	}

	return recurrenceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Recurrence) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("gnucash: no recurrences provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recurrenceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	recurrenceInsertCacheMut.RLock()
	cache, cached := recurrenceInsertCache[key]
	recurrenceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			recurrenceAllColumns,
			recurrenceColumnsWithDefault,
			recurrenceColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, recurrenceGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(recurrenceType, recurrenceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(recurrenceType, recurrenceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"recurrences\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"recurrences\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "gnucash: unable to insert into recurrences")
	}

	if !cached {
		recurrenceInsertCacheMut.Lock()
		recurrenceInsertCache[key] = cache
		recurrenceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Recurrence.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Recurrence) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	recurrenceUpdateCacheMut.RLock()
	cache, cached := recurrenceUpdateCache[key]
	recurrenceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			recurrenceAllColumns,
			recurrencePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, recurrenceGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("gnucash: unable to update recurrences, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"recurrences\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, recurrencePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(recurrenceType, recurrenceMapping, append(wl, recurrencePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to update recurrences row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by update for recurrences")
	}

	if !cached {
		recurrenceUpdateCacheMut.Lock()
		recurrenceUpdateCache[key] = cache
		recurrenceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q recurrenceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to update all for recurrences")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to retrieve rows affected for recurrences")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RecurrenceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("gnucash: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recurrencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"recurrences\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, recurrencePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to update all in recurrence slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to retrieve rows affected all in update all recurrence")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Recurrence) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("gnucash: no recurrences provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recurrenceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	recurrenceUpsertCacheMut.RLock()
	cache, cached := recurrenceUpsertCache[key]
	recurrenceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			recurrenceAllColumns,
			recurrenceColumnsWithDefault,
			recurrenceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			recurrenceAllColumns,
			recurrencePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("gnucash: unable to upsert recurrences, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(recurrencePrimaryKeyColumns))
			copy(conflict, recurrencePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"recurrences\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(recurrenceType, recurrenceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(recurrenceType, recurrenceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "gnucash: unable to upsert recurrences")
	}

	if !cached {
		recurrenceUpsertCacheMut.Lock()
		recurrenceUpsertCache[key] = cache
		recurrenceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Recurrence record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Recurrence) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("gnucash: no Recurrence provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), recurrencePrimaryKeyMapping)
	sql := "DELETE FROM \"recurrences\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to delete from recurrences")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by delete for recurrences")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q recurrenceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("gnucash: no recurrenceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to delete all from recurrences")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by deleteall for recurrences")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RecurrenceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(recurrenceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recurrencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"recurrences\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, recurrencePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to delete all from recurrence slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by deleteall for recurrences")
	}

	if len(recurrenceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Recurrence) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRecurrence(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecurrenceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RecurrenceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recurrencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"recurrences\".* FROM \"recurrences\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, recurrencePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "gnucash: unable to reload all in RecurrenceSlice")
	}

	*o = slice

	return nil
}

// RecurrenceExists checks if the Recurrence row exists.
func RecurrenceExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"recurrences\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "gnucash: unable to check if recurrences exists")
	}

	return exists, nil
}

// Exists checks if the Recurrence row exists.
func (o *Recurrence) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RecurrenceExists(ctx, exec, o.ID)
}
