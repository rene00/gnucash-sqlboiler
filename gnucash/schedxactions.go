// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package gnucash

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Schedxaction is an object representing the database table.
type Schedxaction struct {
	GUID            string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	Name            null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Enabled         int64       `boil:"enabled" json:"enabled" toml:"enabled" yaml:"enabled"`
	StartDate       null.String `boil:"start_date" json:"start_date,omitempty" toml:"start_date" yaml:"start_date,omitempty"`
	EndDate         null.String `boil:"end_date" json:"end_date,omitempty" toml:"end_date" yaml:"end_date,omitempty"`
	LastOccur       null.String `boil:"last_occur" json:"last_occur,omitempty" toml:"last_occur" yaml:"last_occur,omitempty"`
	NumOccur        int64       `boil:"num_occur" json:"num_occur" toml:"num_occur" yaml:"num_occur"`
	RemOccur        int64       `boil:"rem_occur" json:"rem_occur" toml:"rem_occur" yaml:"rem_occur"`
	AutoCreate      int64       `boil:"auto_create" json:"auto_create" toml:"auto_create" yaml:"auto_create"`
	AutoNotify      int64       `boil:"auto_notify" json:"auto_notify" toml:"auto_notify" yaml:"auto_notify"`
	AdvCreation     int64       `boil:"adv_creation" json:"adv_creation" toml:"adv_creation" yaml:"adv_creation"`
	AdvNotify       int64       `boil:"adv_notify" json:"adv_notify" toml:"adv_notify" yaml:"adv_notify"`
	InstanceCount   int64       `boil:"instance_count" json:"instance_count" toml:"instance_count" yaml:"instance_count"`
	TemplateActGUID string      `boil:"template_act_guid" json:"template_act_guid" toml:"template_act_guid" yaml:"template_act_guid"`

	R *schedxactionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L schedxactionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SchedxactionColumns = struct {
	GUID            string
	Name            string
	Enabled         string
	StartDate       string
	EndDate         string
	LastOccur       string
	NumOccur        string
	RemOccur        string
	AutoCreate      string
	AutoNotify      string
	AdvCreation     string
	AdvNotify       string
	InstanceCount   string
	TemplateActGUID string
}{
	GUID:            "guid",
	Name:            "name",
	Enabled:         "enabled",
	StartDate:       "start_date",
	EndDate:         "end_date",
	LastOccur:       "last_occur",
	NumOccur:        "num_occur",
	RemOccur:        "rem_occur",
	AutoCreate:      "auto_create",
	AutoNotify:      "auto_notify",
	AdvCreation:     "adv_creation",
	AdvNotify:       "adv_notify",
	InstanceCount:   "instance_count",
	TemplateActGUID: "template_act_guid",
}

var SchedxactionTableColumns = struct {
	GUID            string
	Name            string
	Enabled         string
	StartDate       string
	EndDate         string
	LastOccur       string
	NumOccur        string
	RemOccur        string
	AutoCreate      string
	AutoNotify      string
	AdvCreation     string
	AdvNotify       string
	InstanceCount   string
	TemplateActGUID string
}{
	GUID:            "schedxactions.guid",
	Name:            "schedxactions.name",
	Enabled:         "schedxactions.enabled",
	StartDate:       "schedxactions.start_date",
	EndDate:         "schedxactions.end_date",
	LastOccur:       "schedxactions.last_occur",
	NumOccur:        "schedxactions.num_occur",
	RemOccur:        "schedxactions.rem_occur",
	AutoCreate:      "schedxactions.auto_create",
	AutoNotify:      "schedxactions.auto_notify",
	AdvCreation:     "schedxactions.adv_creation",
	AdvNotify:       "schedxactions.adv_notify",
	InstanceCount:   "schedxactions.instance_count",
	TemplateActGUID: "schedxactions.template_act_guid",
}

// Generated where

var SchedxactionWhere = struct {
	GUID            whereHelperstring
	Name            whereHelpernull_String
	Enabled         whereHelperint64
	StartDate       whereHelpernull_String
	EndDate         whereHelpernull_String
	LastOccur       whereHelpernull_String
	NumOccur        whereHelperint64
	RemOccur        whereHelperint64
	AutoCreate      whereHelperint64
	AutoNotify      whereHelperint64
	AdvCreation     whereHelperint64
	AdvNotify       whereHelperint64
	InstanceCount   whereHelperint64
	TemplateActGUID whereHelperstring
}{
	GUID:            whereHelperstring{field: "\"schedxactions\".\"guid\""},
	Name:            whereHelpernull_String{field: "\"schedxactions\".\"name\""},
	Enabled:         whereHelperint64{field: "\"schedxactions\".\"enabled\""},
	StartDate:       whereHelpernull_String{field: "\"schedxactions\".\"start_date\""},
	EndDate:         whereHelpernull_String{field: "\"schedxactions\".\"end_date\""},
	LastOccur:       whereHelpernull_String{field: "\"schedxactions\".\"last_occur\""},
	NumOccur:        whereHelperint64{field: "\"schedxactions\".\"num_occur\""},
	RemOccur:        whereHelperint64{field: "\"schedxactions\".\"rem_occur\""},
	AutoCreate:      whereHelperint64{field: "\"schedxactions\".\"auto_create\""},
	AutoNotify:      whereHelperint64{field: "\"schedxactions\".\"auto_notify\""},
	AdvCreation:     whereHelperint64{field: "\"schedxactions\".\"adv_creation\""},
	AdvNotify:       whereHelperint64{field: "\"schedxactions\".\"adv_notify\""},
	InstanceCount:   whereHelperint64{field: "\"schedxactions\".\"instance_count\""},
	TemplateActGUID: whereHelperstring{field: "\"schedxactions\".\"template_act_guid\""},
}

// SchedxactionRels is where relationship names are stored.
var SchedxactionRels = struct {
}{}

// schedxactionR is where relationships are stored.
type schedxactionR struct {
}

// NewStruct creates a new relationship struct
func (*schedxactionR) NewStruct() *schedxactionR {
	return &schedxactionR{}
}

// schedxactionL is where Load methods for each relationship are stored.
type schedxactionL struct{}

var (
	schedxactionAllColumns            = []string{"guid", "name", "enabled", "start_date", "end_date", "last_occur", "num_occur", "rem_occur", "auto_create", "auto_notify", "adv_creation", "adv_notify", "instance_count", "template_act_guid"}
	schedxactionColumnsWithoutDefault = []string{"guid", "enabled", "num_occur", "rem_occur", "auto_create", "auto_notify", "adv_creation", "adv_notify", "instance_count", "template_act_guid"}
	schedxactionColumnsWithDefault    = []string{"name", "start_date", "end_date", "last_occur"}
	schedxactionPrimaryKeyColumns     = []string{"guid"}
	schedxactionGeneratedColumns      = []string{}
)

type (
	// SchedxactionSlice is an alias for a slice of pointers to Schedxaction.
	// This should almost always be used instead of []Schedxaction.
	SchedxactionSlice []*Schedxaction
	// SchedxactionHook is the signature for custom Schedxaction hook methods
	SchedxactionHook func(context.Context, boil.ContextExecutor, *Schedxaction) error

	schedxactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	schedxactionType                 = reflect.TypeOf(&Schedxaction{})
	schedxactionMapping              = queries.MakeStructMapping(schedxactionType)
	schedxactionPrimaryKeyMapping, _ = queries.BindMapping(schedxactionType, schedxactionMapping, schedxactionPrimaryKeyColumns)
	schedxactionInsertCacheMut       sync.RWMutex
	schedxactionInsertCache          = make(map[string]insertCache)
	schedxactionUpdateCacheMut       sync.RWMutex
	schedxactionUpdateCache          = make(map[string]updateCache)
	schedxactionUpsertCacheMut       sync.RWMutex
	schedxactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var schedxactionAfterSelectHooks []SchedxactionHook

var schedxactionBeforeInsertHooks []SchedxactionHook
var schedxactionAfterInsertHooks []SchedxactionHook

var schedxactionBeforeUpdateHooks []SchedxactionHook
var schedxactionAfterUpdateHooks []SchedxactionHook

var schedxactionBeforeDeleteHooks []SchedxactionHook
var schedxactionAfterDeleteHooks []SchedxactionHook

var schedxactionBeforeUpsertHooks []SchedxactionHook
var schedxactionAfterUpsertHooks []SchedxactionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Schedxaction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedxactionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Schedxaction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedxactionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Schedxaction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedxactionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Schedxaction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedxactionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Schedxaction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedxactionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Schedxaction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedxactionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Schedxaction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedxactionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Schedxaction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedxactionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Schedxaction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedxactionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSchedxactionHook registers your hook function for all future operations.
func AddSchedxactionHook(hookPoint boil.HookPoint, schedxactionHook SchedxactionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		schedxactionAfterSelectHooks = append(schedxactionAfterSelectHooks, schedxactionHook)
	case boil.BeforeInsertHook:
		schedxactionBeforeInsertHooks = append(schedxactionBeforeInsertHooks, schedxactionHook)
	case boil.AfterInsertHook:
		schedxactionAfterInsertHooks = append(schedxactionAfterInsertHooks, schedxactionHook)
	case boil.BeforeUpdateHook:
		schedxactionBeforeUpdateHooks = append(schedxactionBeforeUpdateHooks, schedxactionHook)
	case boil.AfterUpdateHook:
		schedxactionAfterUpdateHooks = append(schedxactionAfterUpdateHooks, schedxactionHook)
	case boil.BeforeDeleteHook:
		schedxactionBeforeDeleteHooks = append(schedxactionBeforeDeleteHooks, schedxactionHook)
	case boil.AfterDeleteHook:
		schedxactionAfterDeleteHooks = append(schedxactionAfterDeleteHooks, schedxactionHook)
	case boil.BeforeUpsertHook:
		schedxactionBeforeUpsertHooks = append(schedxactionBeforeUpsertHooks, schedxactionHook)
	case boil.AfterUpsertHook:
		schedxactionAfterUpsertHooks = append(schedxactionAfterUpsertHooks, schedxactionHook)
	}
}

// One returns a single schedxaction record from the query.
func (q schedxactionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Schedxaction, error) {
	o := &Schedxaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "gnucash: failed to execute a one query for schedxactions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Schedxaction records from the query.
func (q schedxactionQuery) All(ctx context.Context, exec boil.ContextExecutor) (SchedxactionSlice, error) {
	var o []*Schedxaction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "gnucash: failed to assign all query results to Schedxaction slice")
	}

	if len(schedxactionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Schedxaction records in the query.
func (q schedxactionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to count schedxactions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q schedxactionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "gnucash: failed to check if schedxactions exists")
	}

	return count > 0, nil
}

// Schedxactions retrieves all the records using an executor.
func Schedxactions(mods ...qm.QueryMod) schedxactionQuery {
	mods = append(mods, qm.From("\"schedxactions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"schedxactions\".*"})
	}

	return schedxactionQuery{q}
}

// FindSchedxaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSchedxaction(ctx context.Context, exec boil.ContextExecutor, gUID string, selectCols ...string) (*Schedxaction, error) {
	schedxactionObj := &Schedxaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"schedxactions\" where \"guid\"=?", sel,
	)

	q := queries.Raw(query, gUID)

	err := q.Bind(ctx, exec, schedxactionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "gnucash: unable to select from schedxactions")
	}

	if err = schedxactionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return schedxactionObj, err
	}

	return schedxactionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Schedxaction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("gnucash: no schedxactions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(schedxactionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	schedxactionInsertCacheMut.RLock()
	cache, cached := schedxactionInsertCache[key]
	schedxactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			schedxactionAllColumns,
			schedxactionColumnsWithDefault,
			schedxactionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(schedxactionType, schedxactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(schedxactionType, schedxactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"schedxactions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"schedxactions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "gnucash: unable to insert into schedxactions")
	}

	if !cached {
		schedxactionInsertCacheMut.Lock()
		schedxactionInsertCache[key] = cache
		schedxactionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Schedxaction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Schedxaction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	schedxactionUpdateCacheMut.RLock()
	cache, cached := schedxactionUpdateCache[key]
	schedxactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			schedxactionAllColumns,
			schedxactionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("gnucash: unable to update schedxactions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"schedxactions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, schedxactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(schedxactionType, schedxactionMapping, append(wl, schedxactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to update schedxactions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by update for schedxactions")
	}

	if !cached {
		schedxactionUpdateCacheMut.Lock()
		schedxactionUpdateCache[key] = cache
		schedxactionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q schedxactionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to update all for schedxactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to retrieve rows affected for schedxactions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SchedxactionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("gnucash: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schedxactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"schedxactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, schedxactionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to update all in schedxaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to retrieve rows affected all in update all schedxaction")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Schedxaction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("gnucash: no schedxactions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(schedxactionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	schedxactionUpsertCacheMut.RLock()
	cache, cached := schedxactionUpsertCache[key]
	schedxactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			schedxactionAllColumns,
			schedxactionColumnsWithDefault,
			schedxactionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			schedxactionAllColumns,
			schedxactionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("gnucash: unable to upsert schedxactions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(schedxactionPrimaryKeyColumns))
			copy(conflict, schedxactionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"schedxactions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(schedxactionType, schedxactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(schedxactionType, schedxactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "gnucash: unable to upsert schedxactions")
	}

	if !cached {
		schedxactionUpsertCacheMut.Lock()
		schedxactionUpsertCache[key] = cache
		schedxactionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Schedxaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Schedxaction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("gnucash: no Schedxaction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), schedxactionPrimaryKeyMapping)
	sql := "DELETE FROM \"schedxactions\" WHERE \"guid\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to delete from schedxactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by delete for schedxactions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q schedxactionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("gnucash: no schedxactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to delete all from schedxactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by deleteall for schedxactions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SchedxactionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(schedxactionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schedxactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"schedxactions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, schedxactionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to delete all from schedxaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by deleteall for schedxactions")
	}

	if len(schedxactionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Schedxaction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSchedxaction(ctx, exec, o.GUID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SchedxactionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SchedxactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schedxactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"schedxactions\".* FROM \"schedxactions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, schedxactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "gnucash: unable to reload all in SchedxactionSlice")
	}

	*o = slice

	return nil
}

// SchedxactionExists checks if the Schedxaction row exists.
func SchedxactionExists(ctx context.Context, exec boil.ContextExecutor, gUID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"schedxactions\" where \"guid\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, gUID)
	}
	row := exec.QueryRowContext(ctx, sql, gUID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "gnucash: unable to check if schedxactions exists")
	}

	return exists, nil
}

// Exists checks if the Schedxaction row exists.
func (o *Schedxaction) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SchedxactionExists(ctx, exec, o.GUID)
}
