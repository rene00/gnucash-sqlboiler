// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package gnucash

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Slot is an object representing the database table.
type Slot struct {
	ID              int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	ObjGUID         string      `boil:"obj_guid" json:"obj_guid" toml:"obj_guid" yaml:"obj_guid"`
	Name            string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	SlotType        int64       `boil:"slot_type" json:"slot_type" toml:"slot_type" yaml:"slot_type"`
	Int64Val        null.Int64  `boil:"int64_val" json:"int64_val,omitempty" toml:"int64_val" yaml:"int64_val,omitempty"`
	StringVal       null.String `boil:"string_val" json:"string_val,omitempty" toml:"string_val" yaml:"string_val,omitempty"`
	DoubleVal       null.String `boil:"double_val" json:"double_val,omitempty" toml:"double_val" yaml:"double_val,omitempty"`
	TimespecVal     null.String `boil:"timespec_val" json:"timespec_val,omitempty" toml:"timespec_val" yaml:"timespec_val,omitempty"`
	GUIDVal         null.String `boil:"guid_val" json:"guid_val,omitempty" toml:"guid_val" yaml:"guid_val,omitempty"`
	NumericValNum   null.Int64  `boil:"numeric_val_num" json:"numeric_val_num,omitempty" toml:"numeric_val_num" yaml:"numeric_val_num,omitempty"`
	NumericValDenom null.Int64  `boil:"numeric_val_denom" json:"numeric_val_denom,omitempty" toml:"numeric_val_denom" yaml:"numeric_val_denom,omitempty"`
	GdateVal        null.String `boil:"gdate_val" json:"gdate_val,omitempty" toml:"gdate_val" yaml:"gdate_val,omitempty"`

	R *slotR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L slotL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SlotColumns = struct {
	ID              string
	ObjGUID         string
	Name            string
	SlotType        string
	Int64Val        string
	StringVal       string
	DoubleVal       string
	TimespecVal     string
	GUIDVal         string
	NumericValNum   string
	NumericValDenom string
	GdateVal        string
}{
	ID:              "id",
	ObjGUID:         "obj_guid",
	Name:            "name",
	SlotType:        "slot_type",
	Int64Val:        "int64_val",
	StringVal:       "string_val",
	DoubleVal:       "double_val",
	TimespecVal:     "timespec_val",
	GUIDVal:         "guid_val",
	NumericValNum:   "numeric_val_num",
	NumericValDenom: "numeric_val_denom",
	GdateVal:        "gdate_val",
}

var SlotTableColumns = struct {
	ID              string
	ObjGUID         string
	Name            string
	SlotType        string
	Int64Val        string
	StringVal       string
	DoubleVal       string
	TimespecVal     string
	GUIDVal         string
	NumericValNum   string
	NumericValDenom string
	GdateVal        string
}{
	ID:              "slots.id",
	ObjGUID:         "slots.obj_guid",
	Name:            "slots.name",
	SlotType:        "slots.slot_type",
	Int64Val:        "slots.int64_val",
	StringVal:       "slots.string_val",
	DoubleVal:       "slots.double_val",
	TimespecVal:     "slots.timespec_val",
	GUIDVal:         "slots.guid_val",
	NumericValNum:   "slots.numeric_val_num",
	NumericValDenom: "slots.numeric_val_denom",
	GdateVal:        "slots.gdate_val",
}

// Generated where

var SlotWhere = struct {
	ID              whereHelperint64
	ObjGUID         whereHelperstring
	Name            whereHelperstring
	SlotType        whereHelperint64
	Int64Val        whereHelpernull_Int64
	StringVal       whereHelpernull_String
	DoubleVal       whereHelpernull_String
	TimespecVal     whereHelpernull_String
	GUIDVal         whereHelpernull_String
	NumericValNum   whereHelpernull_Int64
	NumericValDenom whereHelpernull_Int64
	GdateVal        whereHelpernull_String
}{
	ID:              whereHelperint64{field: "\"slots\".\"id\""},
	ObjGUID:         whereHelperstring{field: "\"slots\".\"obj_guid\""},
	Name:            whereHelperstring{field: "\"slots\".\"name\""},
	SlotType:        whereHelperint64{field: "\"slots\".\"slot_type\""},
	Int64Val:        whereHelpernull_Int64{field: "\"slots\".\"int64_val\""},
	StringVal:       whereHelpernull_String{field: "\"slots\".\"string_val\""},
	DoubleVal:       whereHelpernull_String{field: "\"slots\".\"double_val\""},
	TimespecVal:     whereHelpernull_String{field: "\"slots\".\"timespec_val\""},
	GUIDVal:         whereHelpernull_String{field: "\"slots\".\"guid_val\""},
	NumericValNum:   whereHelpernull_Int64{field: "\"slots\".\"numeric_val_num\""},
	NumericValDenom: whereHelpernull_Int64{field: "\"slots\".\"numeric_val_denom\""},
	GdateVal:        whereHelpernull_String{field: "\"slots\".\"gdate_val\""},
}

// SlotRels is where relationship names are stored.
var SlotRels = struct {
}{}

// slotR is where relationships are stored.
type slotR struct {
}

// NewStruct creates a new relationship struct
func (*slotR) NewStruct() *slotR {
	return &slotR{}
}

// slotL is where Load methods for each relationship are stored.
type slotL struct{}

var (
	slotAllColumns            = []string{"id", "obj_guid", "name", "slot_type", "int64_val", "string_val", "double_val", "timespec_val", "guid_val", "numeric_val_num", "numeric_val_denom", "gdate_val"}
	slotColumnsWithoutDefault = []string{"obj_guid", "name", "slot_type"}
	slotColumnsWithDefault    = []string{"id", "int64_val", "string_val", "double_val", "timespec_val", "guid_val", "numeric_val_num", "numeric_val_denom", "gdate_val"}
	slotPrimaryKeyColumns     = []string{"id"}
	slotGeneratedColumns      = []string{"id"}
)

type (
	// SlotSlice is an alias for a slice of pointers to Slot.
	// This should almost always be used instead of []Slot.
	SlotSlice []*Slot
	// SlotHook is the signature for custom Slot hook methods
	SlotHook func(context.Context, boil.ContextExecutor, *Slot) error

	slotQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	slotType                 = reflect.TypeOf(&Slot{})
	slotMapping              = queries.MakeStructMapping(slotType)
	slotPrimaryKeyMapping, _ = queries.BindMapping(slotType, slotMapping, slotPrimaryKeyColumns)
	slotInsertCacheMut       sync.RWMutex
	slotInsertCache          = make(map[string]insertCache)
	slotUpdateCacheMut       sync.RWMutex
	slotUpdateCache          = make(map[string]updateCache)
	slotUpsertCacheMut       sync.RWMutex
	slotUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var slotAfterSelectHooks []SlotHook

var slotBeforeInsertHooks []SlotHook
var slotAfterInsertHooks []SlotHook

var slotBeforeUpdateHooks []SlotHook
var slotAfterUpdateHooks []SlotHook

var slotBeforeDeleteHooks []SlotHook
var slotAfterDeleteHooks []SlotHook

var slotBeforeUpsertHooks []SlotHook
var slotAfterUpsertHooks []SlotHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Slot) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range slotAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Slot) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range slotBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Slot) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range slotAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Slot) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range slotBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Slot) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range slotAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Slot) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range slotBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Slot) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range slotAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Slot) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range slotBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Slot) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range slotAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSlotHook registers your hook function for all future operations.
func AddSlotHook(hookPoint boil.HookPoint, slotHook SlotHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		slotAfterSelectHooks = append(slotAfterSelectHooks, slotHook)
	case boil.BeforeInsertHook:
		slotBeforeInsertHooks = append(slotBeforeInsertHooks, slotHook)
	case boil.AfterInsertHook:
		slotAfterInsertHooks = append(slotAfterInsertHooks, slotHook)
	case boil.BeforeUpdateHook:
		slotBeforeUpdateHooks = append(slotBeforeUpdateHooks, slotHook)
	case boil.AfterUpdateHook:
		slotAfterUpdateHooks = append(slotAfterUpdateHooks, slotHook)
	case boil.BeforeDeleteHook:
		slotBeforeDeleteHooks = append(slotBeforeDeleteHooks, slotHook)
	case boil.AfterDeleteHook:
		slotAfterDeleteHooks = append(slotAfterDeleteHooks, slotHook)
	case boil.BeforeUpsertHook:
		slotBeforeUpsertHooks = append(slotBeforeUpsertHooks, slotHook)
	case boil.AfterUpsertHook:
		slotAfterUpsertHooks = append(slotAfterUpsertHooks, slotHook)
	}
}

// One returns a single slot record from the query.
func (q slotQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Slot, error) {
	o := &Slot{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "gnucash: failed to execute a one query for slots")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Slot records from the query.
func (q slotQuery) All(ctx context.Context, exec boil.ContextExecutor) (SlotSlice, error) {
	var o []*Slot

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "gnucash: failed to assign all query results to Slot slice")
	}

	if len(slotAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Slot records in the query.
func (q slotQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to count slots rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q slotQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "gnucash: failed to check if slots exists")
	}

	return count > 0, nil
}

// Slots retrieves all the records using an executor.
func Slots(mods ...qm.QueryMod) slotQuery {
	mods = append(mods, qm.From("\"slots\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"slots\".*"})
	}

	return slotQuery{q}
}

// FindSlot retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSlot(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Slot, error) {
	slotObj := &Slot{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"slots\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, slotObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "gnucash: unable to select from slots")
	}

	if err = slotObj.doAfterSelectHooks(ctx, exec); err != nil {
		return slotObj, err
	}

	return slotObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Slot) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("gnucash: no slots provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(slotColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	slotInsertCacheMut.RLock()
	cache, cached := slotInsertCache[key]
	slotInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			slotAllColumns,
			slotColumnsWithDefault,
			slotColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, slotGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(slotType, slotMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(slotType, slotMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"slots\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"slots\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "gnucash: unable to insert into slots")
	}

	if !cached {
		slotInsertCacheMut.Lock()
		slotInsertCache[key] = cache
		slotInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Slot.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Slot) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	slotUpdateCacheMut.RLock()
	cache, cached := slotUpdateCache[key]
	slotUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			slotAllColumns,
			slotPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, slotGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("gnucash: unable to update slots, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"slots\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, slotPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(slotType, slotMapping, append(wl, slotPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to update slots row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by update for slots")
	}

	if !cached {
		slotUpdateCacheMut.Lock()
		slotUpdateCache[key] = cache
		slotUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q slotQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to update all for slots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to retrieve rows affected for slots")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SlotSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("gnucash: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), slotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"slots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, slotPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to update all in slot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to retrieve rows affected all in update all slot")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Slot) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("gnucash: no slots provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(slotColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	slotUpsertCacheMut.RLock()
	cache, cached := slotUpsertCache[key]
	slotUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			slotAllColumns,
			slotColumnsWithDefault,
			slotColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			slotAllColumns,
			slotPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("gnucash: unable to upsert slots, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(slotPrimaryKeyColumns))
			copy(conflict, slotPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"slots\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(slotType, slotMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(slotType, slotMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "gnucash: unable to upsert slots")
	}

	if !cached {
		slotUpsertCacheMut.Lock()
		slotUpsertCache[key] = cache
		slotUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Slot record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Slot) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("gnucash: no Slot provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), slotPrimaryKeyMapping)
	sql := "DELETE FROM \"slots\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to delete from slots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by delete for slots")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q slotQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("gnucash: no slotQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to delete all from slots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by deleteall for slots")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SlotSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(slotBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), slotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"slots\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, slotPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to delete all from slot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by deleteall for slots")
	}

	if len(slotAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Slot) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSlot(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SlotSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SlotSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), slotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"slots\".* FROM \"slots\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, slotPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "gnucash: unable to reload all in SlotSlice")
	}

	*o = slice

	return nil
}

// SlotExists checks if the Slot row exists.
func SlotExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"slots\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "gnucash: unable to check if slots exists")
	}

	return exists, nil
}

// Exists checks if the Slot row exists.
func (o *Slot) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SlotExists(ctx, exec, o.ID)
}
