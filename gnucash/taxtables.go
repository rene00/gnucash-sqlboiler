// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package gnucash

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Taxtable is an object representing the database table.
type Taxtable struct {
	GUID      string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	Name      string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Refcount  int64       `boil:"refcount" json:"refcount" toml:"refcount" yaml:"refcount"`
	Invisible int64       `boil:"invisible" json:"invisible" toml:"invisible" yaml:"invisible"`
	Parent    null.String `boil:"parent" json:"parent,omitempty" toml:"parent" yaml:"parent,omitempty"`

	R *taxtableR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L taxtableL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TaxtableColumns = struct {
	GUID      string
	Name      string
	Refcount  string
	Invisible string
	Parent    string
}{
	GUID:      "guid",
	Name:      "name",
	Refcount:  "refcount",
	Invisible: "invisible",
	Parent:    "parent",
}

var TaxtableTableColumns = struct {
	GUID      string
	Name      string
	Refcount  string
	Invisible string
	Parent    string
}{
	GUID:      "taxtables.guid",
	Name:      "taxtables.name",
	Refcount:  "taxtables.refcount",
	Invisible: "taxtables.invisible",
	Parent:    "taxtables.parent",
}

// Generated where

var TaxtableWhere = struct {
	GUID      whereHelperstring
	Name      whereHelperstring
	Refcount  whereHelperint64
	Invisible whereHelperint64
	Parent    whereHelpernull_String
}{
	GUID:      whereHelperstring{field: "\"taxtables\".\"guid\""},
	Name:      whereHelperstring{field: "\"taxtables\".\"name\""},
	Refcount:  whereHelperint64{field: "\"taxtables\".\"refcount\""},
	Invisible: whereHelperint64{field: "\"taxtables\".\"invisible\""},
	Parent:    whereHelpernull_String{field: "\"taxtables\".\"parent\""},
}

// TaxtableRels is where relationship names are stored.
var TaxtableRels = struct {
}{}

// taxtableR is where relationships are stored.
type taxtableR struct {
}

// NewStruct creates a new relationship struct
func (*taxtableR) NewStruct() *taxtableR {
	return &taxtableR{}
}

// taxtableL is where Load methods for each relationship are stored.
type taxtableL struct{}

var (
	taxtableAllColumns            = []string{"guid", "name", "refcount", "invisible", "parent"}
	taxtableColumnsWithoutDefault = []string{"guid", "name", "refcount", "invisible"}
	taxtableColumnsWithDefault    = []string{"parent"}
	taxtablePrimaryKeyColumns     = []string{"guid"}
	taxtableGeneratedColumns      = []string{}
)

type (
	// TaxtableSlice is an alias for a slice of pointers to Taxtable.
	// This should almost always be used instead of []Taxtable.
	TaxtableSlice []*Taxtable
	// TaxtableHook is the signature for custom Taxtable hook methods
	TaxtableHook func(context.Context, boil.ContextExecutor, *Taxtable) error

	taxtableQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	taxtableType                 = reflect.TypeOf(&Taxtable{})
	taxtableMapping              = queries.MakeStructMapping(taxtableType)
	taxtablePrimaryKeyMapping, _ = queries.BindMapping(taxtableType, taxtableMapping, taxtablePrimaryKeyColumns)
	taxtableInsertCacheMut       sync.RWMutex
	taxtableInsertCache          = make(map[string]insertCache)
	taxtableUpdateCacheMut       sync.RWMutex
	taxtableUpdateCache          = make(map[string]updateCache)
	taxtableUpsertCacheMut       sync.RWMutex
	taxtableUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var taxtableAfterSelectHooks []TaxtableHook

var taxtableBeforeInsertHooks []TaxtableHook
var taxtableAfterInsertHooks []TaxtableHook

var taxtableBeforeUpdateHooks []TaxtableHook
var taxtableAfterUpdateHooks []TaxtableHook

var taxtableBeforeDeleteHooks []TaxtableHook
var taxtableAfterDeleteHooks []TaxtableHook

var taxtableBeforeUpsertHooks []TaxtableHook
var taxtableAfterUpsertHooks []TaxtableHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Taxtable) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taxtableAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Taxtable) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taxtableBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Taxtable) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taxtableAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Taxtable) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taxtableBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Taxtable) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taxtableAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Taxtable) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taxtableBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Taxtable) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taxtableAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Taxtable) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taxtableBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Taxtable) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taxtableAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTaxtableHook registers your hook function for all future operations.
func AddTaxtableHook(hookPoint boil.HookPoint, taxtableHook TaxtableHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		taxtableAfterSelectHooks = append(taxtableAfterSelectHooks, taxtableHook)
	case boil.BeforeInsertHook:
		taxtableBeforeInsertHooks = append(taxtableBeforeInsertHooks, taxtableHook)
	case boil.AfterInsertHook:
		taxtableAfterInsertHooks = append(taxtableAfterInsertHooks, taxtableHook)
	case boil.BeforeUpdateHook:
		taxtableBeforeUpdateHooks = append(taxtableBeforeUpdateHooks, taxtableHook)
	case boil.AfterUpdateHook:
		taxtableAfterUpdateHooks = append(taxtableAfterUpdateHooks, taxtableHook)
	case boil.BeforeDeleteHook:
		taxtableBeforeDeleteHooks = append(taxtableBeforeDeleteHooks, taxtableHook)
	case boil.AfterDeleteHook:
		taxtableAfterDeleteHooks = append(taxtableAfterDeleteHooks, taxtableHook)
	case boil.BeforeUpsertHook:
		taxtableBeforeUpsertHooks = append(taxtableBeforeUpsertHooks, taxtableHook)
	case boil.AfterUpsertHook:
		taxtableAfterUpsertHooks = append(taxtableAfterUpsertHooks, taxtableHook)
	}
}

// One returns a single taxtable record from the query.
func (q taxtableQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Taxtable, error) {
	o := &Taxtable{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "gnucash: failed to execute a one query for taxtables")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Taxtable records from the query.
func (q taxtableQuery) All(ctx context.Context, exec boil.ContextExecutor) (TaxtableSlice, error) {
	var o []*Taxtable

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "gnucash: failed to assign all query results to Taxtable slice")
	}

	if len(taxtableAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Taxtable records in the query.
func (q taxtableQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to count taxtables rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q taxtableQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "gnucash: failed to check if taxtables exists")
	}

	return count > 0, nil
}

// Taxtables retrieves all the records using an executor.
func Taxtables(mods ...qm.QueryMod) taxtableQuery {
	mods = append(mods, qm.From("\"taxtables\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"taxtables\".*"})
	}

	return taxtableQuery{q}
}

// FindTaxtable retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTaxtable(ctx context.Context, exec boil.ContextExecutor, gUID string, selectCols ...string) (*Taxtable, error) {
	taxtableObj := &Taxtable{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"taxtables\" where \"guid\"=?", sel,
	)

	q := queries.Raw(query, gUID)

	err := q.Bind(ctx, exec, taxtableObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "gnucash: unable to select from taxtables")
	}

	if err = taxtableObj.doAfterSelectHooks(ctx, exec); err != nil {
		return taxtableObj, err
	}

	return taxtableObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Taxtable) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("gnucash: no taxtables provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(taxtableColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	taxtableInsertCacheMut.RLock()
	cache, cached := taxtableInsertCache[key]
	taxtableInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			taxtableAllColumns,
			taxtableColumnsWithDefault,
			taxtableColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(taxtableType, taxtableMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(taxtableType, taxtableMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"taxtables\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"taxtables\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "gnucash: unable to insert into taxtables")
	}

	if !cached {
		taxtableInsertCacheMut.Lock()
		taxtableInsertCache[key] = cache
		taxtableInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Taxtable.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Taxtable) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	taxtableUpdateCacheMut.RLock()
	cache, cached := taxtableUpdateCache[key]
	taxtableUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			taxtableAllColumns,
			taxtablePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("gnucash: unable to update taxtables, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"taxtables\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, taxtablePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(taxtableType, taxtableMapping, append(wl, taxtablePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to update taxtables row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by update for taxtables")
	}

	if !cached {
		taxtableUpdateCacheMut.Lock()
		taxtableUpdateCache[key] = cache
		taxtableUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q taxtableQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to update all for taxtables")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to retrieve rows affected for taxtables")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TaxtableSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("gnucash: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taxtablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"taxtables\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, taxtablePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to update all in taxtable slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to retrieve rows affected all in update all taxtable")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Taxtable) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("gnucash: no taxtables provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(taxtableColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	taxtableUpsertCacheMut.RLock()
	cache, cached := taxtableUpsertCache[key]
	taxtableUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			taxtableAllColumns,
			taxtableColumnsWithDefault,
			taxtableColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			taxtableAllColumns,
			taxtablePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("gnucash: unable to upsert taxtables, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(taxtablePrimaryKeyColumns))
			copy(conflict, taxtablePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"taxtables\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(taxtableType, taxtableMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(taxtableType, taxtableMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "gnucash: unable to upsert taxtables")
	}

	if !cached {
		taxtableUpsertCacheMut.Lock()
		taxtableUpsertCache[key] = cache
		taxtableUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Taxtable record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Taxtable) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("gnucash: no Taxtable provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), taxtablePrimaryKeyMapping)
	sql := "DELETE FROM \"taxtables\" WHERE \"guid\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to delete from taxtables")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by delete for taxtables")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q taxtableQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("gnucash: no taxtableQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to delete all from taxtables")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by deleteall for taxtables")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TaxtableSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(taxtableBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taxtablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"taxtables\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, taxtablePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to delete all from taxtable slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by deleteall for taxtables")
	}

	if len(taxtableAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Taxtable) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTaxtable(ctx, exec, o.GUID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TaxtableSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TaxtableSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taxtablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"taxtables\".* FROM \"taxtables\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, taxtablePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "gnucash: unable to reload all in TaxtableSlice")
	}

	*o = slice

	return nil
}

// TaxtableExists checks if the Taxtable row exists.
func TaxtableExists(ctx context.Context, exec boil.ContextExecutor, gUID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"taxtables\" where \"guid\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, gUID)
	}
	row := exec.QueryRowContext(ctx, sql, gUID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "gnucash: unable to check if taxtables exists")
	}

	return exists, nil
}

// Exists checks if the Taxtable row exists.
func (o *Taxtable) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TaxtableExists(ctx, exec, o.GUID)
}
