// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package gnucash

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Vendor is an object representing the database table.
type Vendor struct {
	GUID        string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Notes       string      `boil:"notes" json:"notes" toml:"notes" yaml:"notes"`
	Currency    string      `boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	Active      int64       `boil:"active" json:"active" toml:"active" yaml:"active"`
	TaxOverride int64       `boil:"tax_override" json:"tax_override" toml:"tax_override" yaml:"tax_override"`
	AddrName    null.String `boil:"addr_name" json:"addr_name,omitempty" toml:"addr_name" yaml:"addr_name,omitempty"`
	AddrAddr1   null.String `boil:"addr_addr1" json:"addr_addr1,omitempty" toml:"addr_addr1" yaml:"addr_addr1,omitempty"`
	AddrAddr2   null.String `boil:"addr_addr2" json:"addr_addr2,omitempty" toml:"addr_addr2" yaml:"addr_addr2,omitempty"`
	AddrAddr3   null.String `boil:"addr_addr3" json:"addr_addr3,omitempty" toml:"addr_addr3" yaml:"addr_addr3,omitempty"`
	AddrAddr4   null.String `boil:"addr_addr4" json:"addr_addr4,omitempty" toml:"addr_addr4" yaml:"addr_addr4,omitempty"`
	AddrPhone   null.String `boil:"addr_phone" json:"addr_phone,omitempty" toml:"addr_phone" yaml:"addr_phone,omitempty"`
	AddrFax     null.String `boil:"addr_fax" json:"addr_fax,omitempty" toml:"addr_fax" yaml:"addr_fax,omitempty"`
	AddrEmail   null.String `boil:"addr_email" json:"addr_email,omitempty" toml:"addr_email" yaml:"addr_email,omitempty"`
	Terms       null.String `boil:"terms" json:"terms,omitempty" toml:"terms" yaml:"terms,omitempty"`
	TaxInc      null.String `boil:"tax_inc" json:"tax_inc,omitempty" toml:"tax_inc" yaml:"tax_inc,omitempty"`
	TaxTable    null.String `boil:"tax_table" json:"tax_table,omitempty" toml:"tax_table" yaml:"tax_table,omitempty"`

	R *vendorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vendorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VendorColumns = struct {
	GUID        string
	Name        string
	ID          string
	Notes       string
	Currency    string
	Active      string
	TaxOverride string
	AddrName    string
	AddrAddr1   string
	AddrAddr2   string
	AddrAddr3   string
	AddrAddr4   string
	AddrPhone   string
	AddrFax     string
	AddrEmail   string
	Terms       string
	TaxInc      string
	TaxTable    string
}{
	GUID:        "guid",
	Name:        "name",
	ID:          "id",
	Notes:       "notes",
	Currency:    "currency",
	Active:      "active",
	TaxOverride: "tax_override",
	AddrName:    "addr_name",
	AddrAddr1:   "addr_addr1",
	AddrAddr2:   "addr_addr2",
	AddrAddr3:   "addr_addr3",
	AddrAddr4:   "addr_addr4",
	AddrPhone:   "addr_phone",
	AddrFax:     "addr_fax",
	AddrEmail:   "addr_email",
	Terms:       "terms",
	TaxInc:      "tax_inc",
	TaxTable:    "tax_table",
}

var VendorTableColumns = struct {
	GUID        string
	Name        string
	ID          string
	Notes       string
	Currency    string
	Active      string
	TaxOverride string
	AddrName    string
	AddrAddr1   string
	AddrAddr2   string
	AddrAddr3   string
	AddrAddr4   string
	AddrPhone   string
	AddrFax     string
	AddrEmail   string
	Terms       string
	TaxInc      string
	TaxTable    string
}{
	GUID:        "vendors.guid",
	Name:        "vendors.name",
	ID:          "vendors.id",
	Notes:       "vendors.notes",
	Currency:    "vendors.currency",
	Active:      "vendors.active",
	TaxOverride: "vendors.tax_override",
	AddrName:    "vendors.addr_name",
	AddrAddr1:   "vendors.addr_addr1",
	AddrAddr2:   "vendors.addr_addr2",
	AddrAddr3:   "vendors.addr_addr3",
	AddrAddr4:   "vendors.addr_addr4",
	AddrPhone:   "vendors.addr_phone",
	AddrFax:     "vendors.addr_fax",
	AddrEmail:   "vendors.addr_email",
	Terms:       "vendors.terms",
	TaxInc:      "vendors.tax_inc",
	TaxTable:    "vendors.tax_table",
}

// Generated where

var VendorWhere = struct {
	GUID        whereHelperstring
	Name        whereHelperstring
	ID          whereHelperstring
	Notes       whereHelperstring
	Currency    whereHelperstring
	Active      whereHelperint64
	TaxOverride whereHelperint64
	AddrName    whereHelpernull_String
	AddrAddr1   whereHelpernull_String
	AddrAddr2   whereHelpernull_String
	AddrAddr3   whereHelpernull_String
	AddrAddr4   whereHelpernull_String
	AddrPhone   whereHelpernull_String
	AddrFax     whereHelpernull_String
	AddrEmail   whereHelpernull_String
	Terms       whereHelpernull_String
	TaxInc      whereHelpernull_String
	TaxTable    whereHelpernull_String
}{
	GUID:        whereHelperstring{field: "\"vendors\".\"guid\""},
	Name:        whereHelperstring{field: "\"vendors\".\"name\""},
	ID:          whereHelperstring{field: "\"vendors\".\"id\""},
	Notes:       whereHelperstring{field: "\"vendors\".\"notes\""},
	Currency:    whereHelperstring{field: "\"vendors\".\"currency\""},
	Active:      whereHelperint64{field: "\"vendors\".\"active\""},
	TaxOverride: whereHelperint64{field: "\"vendors\".\"tax_override\""},
	AddrName:    whereHelpernull_String{field: "\"vendors\".\"addr_name\""},
	AddrAddr1:   whereHelpernull_String{field: "\"vendors\".\"addr_addr1\""},
	AddrAddr2:   whereHelpernull_String{field: "\"vendors\".\"addr_addr2\""},
	AddrAddr3:   whereHelpernull_String{field: "\"vendors\".\"addr_addr3\""},
	AddrAddr4:   whereHelpernull_String{field: "\"vendors\".\"addr_addr4\""},
	AddrPhone:   whereHelpernull_String{field: "\"vendors\".\"addr_phone\""},
	AddrFax:     whereHelpernull_String{field: "\"vendors\".\"addr_fax\""},
	AddrEmail:   whereHelpernull_String{field: "\"vendors\".\"addr_email\""},
	Terms:       whereHelpernull_String{field: "\"vendors\".\"terms\""},
	TaxInc:      whereHelpernull_String{field: "\"vendors\".\"tax_inc\""},
	TaxTable:    whereHelpernull_String{field: "\"vendors\".\"tax_table\""},
}

// VendorRels is where relationship names are stored.
var VendorRels = struct {
}{}

// vendorR is where relationships are stored.
type vendorR struct {
}

// NewStruct creates a new relationship struct
func (*vendorR) NewStruct() *vendorR {
	return &vendorR{}
}

// vendorL is where Load methods for each relationship are stored.
type vendorL struct{}

var (
	vendorAllColumns            = []string{"guid", "name", "id", "notes", "currency", "active", "tax_override", "addr_name", "addr_addr1", "addr_addr2", "addr_addr3", "addr_addr4", "addr_phone", "addr_fax", "addr_email", "terms", "tax_inc", "tax_table"}
	vendorColumnsWithoutDefault = []string{"guid", "name", "id", "notes", "currency", "active", "tax_override"}
	vendorColumnsWithDefault    = []string{"addr_name", "addr_addr1", "addr_addr2", "addr_addr3", "addr_addr4", "addr_phone", "addr_fax", "addr_email", "terms", "tax_inc", "tax_table"}
	vendorPrimaryKeyColumns     = []string{"guid"}
	vendorGeneratedColumns      = []string{}
)

type (
	// VendorSlice is an alias for a slice of pointers to Vendor.
	// This should almost always be used instead of []Vendor.
	VendorSlice []*Vendor
	// VendorHook is the signature for custom Vendor hook methods
	VendorHook func(context.Context, boil.ContextExecutor, *Vendor) error

	vendorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vendorType                 = reflect.TypeOf(&Vendor{})
	vendorMapping              = queries.MakeStructMapping(vendorType)
	vendorPrimaryKeyMapping, _ = queries.BindMapping(vendorType, vendorMapping, vendorPrimaryKeyColumns)
	vendorInsertCacheMut       sync.RWMutex
	vendorInsertCache          = make(map[string]insertCache)
	vendorUpdateCacheMut       sync.RWMutex
	vendorUpdateCache          = make(map[string]updateCache)
	vendorUpsertCacheMut       sync.RWMutex
	vendorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var vendorAfterSelectHooks []VendorHook

var vendorBeforeInsertHooks []VendorHook
var vendorAfterInsertHooks []VendorHook

var vendorBeforeUpdateHooks []VendorHook
var vendorAfterUpdateHooks []VendorHook

var vendorBeforeDeleteHooks []VendorHook
var vendorAfterDeleteHooks []VendorHook

var vendorBeforeUpsertHooks []VendorHook
var vendorAfterUpsertHooks []VendorHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Vendor) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Vendor) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Vendor) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Vendor) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Vendor) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Vendor) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Vendor) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Vendor) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Vendor) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vendorAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVendorHook registers your hook function for all future operations.
func AddVendorHook(hookPoint boil.HookPoint, vendorHook VendorHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vendorAfterSelectHooks = append(vendorAfterSelectHooks, vendorHook)
	case boil.BeforeInsertHook:
		vendorBeforeInsertHooks = append(vendorBeforeInsertHooks, vendorHook)
	case boil.AfterInsertHook:
		vendorAfterInsertHooks = append(vendorAfterInsertHooks, vendorHook)
	case boil.BeforeUpdateHook:
		vendorBeforeUpdateHooks = append(vendorBeforeUpdateHooks, vendorHook)
	case boil.AfterUpdateHook:
		vendorAfterUpdateHooks = append(vendorAfterUpdateHooks, vendorHook)
	case boil.BeforeDeleteHook:
		vendorBeforeDeleteHooks = append(vendorBeforeDeleteHooks, vendorHook)
	case boil.AfterDeleteHook:
		vendorAfterDeleteHooks = append(vendorAfterDeleteHooks, vendorHook)
	case boil.BeforeUpsertHook:
		vendorBeforeUpsertHooks = append(vendorBeforeUpsertHooks, vendorHook)
	case boil.AfterUpsertHook:
		vendorAfterUpsertHooks = append(vendorAfterUpsertHooks, vendorHook)
	}
}

// One returns a single vendor record from the query.
func (q vendorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Vendor, error) {
	o := &Vendor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "gnucash: failed to execute a one query for vendors")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Vendor records from the query.
func (q vendorQuery) All(ctx context.Context, exec boil.ContextExecutor) (VendorSlice, error) {
	var o []*Vendor

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "gnucash: failed to assign all query results to Vendor slice")
	}

	if len(vendorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Vendor records in the query.
func (q vendorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to count vendors rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vendorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "gnucash: failed to check if vendors exists")
	}

	return count > 0, nil
}

// Vendors retrieves all the records using an executor.
func Vendors(mods ...qm.QueryMod) vendorQuery {
	mods = append(mods, qm.From("\"vendors\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"vendors\".*"})
	}

	return vendorQuery{q}
}

// FindVendor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVendor(ctx context.Context, exec boil.ContextExecutor, gUID string, selectCols ...string) (*Vendor, error) {
	vendorObj := &Vendor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"vendors\" where \"guid\"=?", sel,
	)

	q := queries.Raw(query, gUID)

	err := q.Bind(ctx, exec, vendorObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "gnucash: unable to select from vendors")
	}

	if err = vendorObj.doAfterSelectHooks(ctx, exec); err != nil {
		return vendorObj, err
	}

	return vendorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Vendor) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("gnucash: no vendors provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vendorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vendorInsertCacheMut.RLock()
	cache, cached := vendorInsertCache[key]
	vendorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vendorAllColumns,
			vendorColumnsWithDefault,
			vendorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vendorType, vendorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vendorType, vendorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"vendors\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"vendors\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "gnucash: unable to insert into vendors")
	}

	if !cached {
		vendorInsertCacheMut.Lock()
		vendorInsertCache[key] = cache
		vendorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Vendor.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Vendor) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	vendorUpdateCacheMut.RLock()
	cache, cached := vendorUpdateCache[key]
	vendorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vendorAllColumns,
			vendorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("gnucash: unable to update vendors, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"vendors\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, vendorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vendorType, vendorMapping, append(wl, vendorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to update vendors row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by update for vendors")
	}

	if !cached {
		vendorUpdateCacheMut.Lock()
		vendorUpdateCache[key] = cache
		vendorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q vendorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to update all for vendors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to retrieve rows affected for vendors")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VendorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("gnucash: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"vendors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, vendorPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to update all in vendor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to retrieve rows affected all in update all vendor")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Vendor) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("gnucash: no vendors provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vendorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vendorUpsertCacheMut.RLock()
	cache, cached := vendorUpsertCache[key]
	vendorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			vendorAllColumns,
			vendorColumnsWithDefault,
			vendorColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			vendorAllColumns,
			vendorPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("gnucash: unable to upsert vendors, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(vendorPrimaryKeyColumns))
			copy(conflict, vendorPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"vendors\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(vendorType, vendorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vendorType, vendorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "gnucash: unable to upsert vendors")
	}

	if !cached {
		vendorUpsertCacheMut.Lock()
		vendorUpsertCache[key] = cache
		vendorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Vendor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Vendor) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("gnucash: no Vendor provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vendorPrimaryKeyMapping)
	sql := "DELETE FROM \"vendors\" WHERE \"guid\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to delete from vendors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by delete for vendors")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vendorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("gnucash: no vendorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to delete all from vendors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by deleteall for vendors")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VendorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(vendorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"vendors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, vendorPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: unable to delete all from vendor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "gnucash: failed to get rows affected by deleteall for vendors")
	}

	if len(vendorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Vendor) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVendor(ctx, exec, o.GUID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VendorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VendorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vendorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"vendors\".* FROM \"vendors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, vendorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "gnucash: unable to reload all in VendorSlice")
	}

	*o = slice

	return nil
}

// VendorExists checks if the Vendor row exists.
func VendorExists(ctx context.Context, exec boil.ContextExecutor, gUID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"vendors\" where \"guid\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, gUID)
	}
	row := exec.QueryRowContext(ctx, sql, gUID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "gnucash: unable to check if vendors exists")
	}

	return exists, nil
}

// Exists checks if the Vendor row exists.
func (o *Vendor) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VendorExists(ctx, exec, o.GUID)
}
